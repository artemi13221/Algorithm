#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main(void)
{
    int te[19][4][2] = {
        { { 0, 0 }, { 0, 1 }, { 0, 1 }, { 1, 0 } },
        { { 0, 0 }, { 1, 0 }, { 1, 0 }, { 0, -1 } },
        { { 0, 0 }, { 0, -1 }, { 0, -1 }, { -1, 0 } },
        { { 0, 0 }, { 0, -1 }, { 1, 0 }, { 1, 0 } },
        { { 0, 0 }, { 1, 0 }, { 0, -1 }, { -1, 0 } },
        { { 0, 0 }, { 0, 1 }, { 1, 0 }, { 0, 1 } },
        { { 0, 0 }, { 1, 0 }, { 0, -1 }, { 1, 0 } },
        { { 0, 0 }, { 0, 1 }, { -1, 0 }, { 0, 1 } },
        { { 0, 0 }, { 1, 0 }, { 0, 1 }, { 1, 0 } },
        { { 0, 0 }, { 1, 0 }, { 1, 0 }, { -1, 1 } },
        { { 0, 0 }, { 0, 1 }, { 0, 1 }, { 1, -1 } },
        { { 0, 0 }, { 1, 0 }, { 1, 0 }, { -1, -1 } },
        { { 0, 0 }, { 0, 1 }, { 0, 1 }, { -1, -1 } },
        { { 0, 0 }, { 1, 0 }, { 0, -1 }, { 0, -1 } },
        { { 0, 0 }, { 1, 0 }, { 1, 0 }, { 0, 1 } },
        { { 0, 0 }, { 0, -1 }, { 0, -1 }, { 1, 0 } },
        { { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 0 } },
        { { 0, 0 }, { 1, 0 }, { 1, 0 }, { 1, 0 } },
        { { 0, 0 }, { 0, 1 }, { 0, 1 }, { 0, 1 } }
    };

    int x, y;
    cin >> y >> x;
    vector<vector<int>> test(y, vector<int>(x, 0));

    int result = 0;

    for (int i = 0; i < y; i++) {
        for (int j = 0; j < x; j++) {
            int tmp;
            cin >> tmp;

            test[i][j] = tmp;
        }
    }

    for (int i = 0; i < y; i++) {
        for (int j = 0; j < x; j++) {
            for (int t = 0; t < 19; t++) {
                int dx, dy;
                int max = 0;
                dy = i;
                dx = j;
                for (int k = 0; k < 4; k++) {
                    dx += te[t][k][0];
                    dy += te[t][k][1];

                    if (dx < 0 || dy < 0) {
                        break;
                    }
                    if (dx >= x || dy >= y) {
                        break;
                    }

                    max += test[dy][dx];
                }
                result = (max > result ? max : result);
            }
        }
    }

    cout << result;
}